
lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000148  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000250  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa5  00000000  00000000  00000f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a50  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000138e4  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  00015d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00015e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004866  00000000  00000000  00015e62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d5 e0       	ldi	r29, 0x05	; 5
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e4       	ldi	r30, 0x48	; 72
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a5 30       	cpi	r26, 0x05	; 5
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	11 d0       	rcall	.+34     	; 0x102 <main>
  e0:	31 c0       	rjmp	.+98     	; 0x144 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <getSRAM>:
.extern address
.extern SRAMValAddr

getSRAM:
	
LDI YH, hi8(address)
  e4:	d1 e0       	ldi	r29, 0x01	; 1
LDI YL, lo8(address)
  e6:	c3 e0       	ldi	r28, 0x03	; 3
LDI ZH, hi8(SRAMValAddr)
  e8:	f1 e0       	ldi	r31, 0x01	; 1
LDI ZL, lo8(SRAMValAddr)
  ea:	e0 e0       	ldi	r30, 0x00	; 0

LD r18, Y
  ec:	28 81       	ld	r18, Y
ST Z, r18
  ee:	20 83       	st	Z, r18


ret 
  f0:	08 95       	ret

000000f2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  f2:	08 95       	ret

000000f4 <init>:

void init()
{
		//link with getSRAM.s

		board_init();
  f4:	fe df       	rcall	.-4      	; 0xf2 <board_init>

		//Set Input/Output settings for ports
		DDRC = 0b10000000;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	87 b9       	out	0x07, r24	; 7
		DDRD = 0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a b9       	out	0x0a, r24	; 10
		
		//Set clock to 0
		PORTC = 0x0;
  fe:	18 b8       	out	0x08, r1	; 8
 100:	08 95       	ret

00000102 <main>:
unsigned short SRAMValAddr = &SRAMVal;


int main (void)
{
	init();
 102:	f8 df       	rcall	.-16     	; 0xf4 <init>

	//Loop through all values of specified range
	 for (int i = SRAM_START_ADDR + OFFSET; i<SRAM_START_ADDR + NUM_ADDR + OFFSET; i++){
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d1 e0       	ldi	r29, 0x01	; 1
		//Set clock to rising edge
		PORTC = 0b10000000;
 108:	10 e8       	ldi	r17, 0x80	; 128
 10a:	18 b9       	out	0x08, r17	; 8
		//Puts value into SRAMVal
		//truncate I to address
		address = (short)i;
 10c:	d0 93 04 01 	sts	0x0104, r29	; 0x800104 <address+0x1>
 110:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <address>
		SRAMVal = getSRAM(address);
 114:	ce 01       	movw	r24, r28
 116:	e6 df       	rcall	.-52     	; 0xe4 <getSRAM>
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		FPGA_BUS = SRAMVal;
 11c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	83 e2       	ldi	r24, 0x23	; 35
 120:	94 ef       	ldi	r25, 0xF4	; 244
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x20>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x26>
 128:	00 00       	nop
		// Wait 250 ms
		_delay_ms(250);
		//Set clock to falling edge
		PORTC = 0x0;
 12a:	18 b8       	out	0x08, r1	; 8
 12c:	83 e2       	ldi	r24, 0x23	; 35
 12e:	94 ef       	ldi	r25, 0xF4	; 244
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x2e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x34>
 136:	00 00       	nop
int main (void)
{
	init();

	//Loop through all values of specified range
	 for (int i = SRAM_START_ADDR + OFFSET; i<SRAM_START_ADDR + NUM_ADDR + OFFSET; i++){
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	c0 34       	cpi	r28, 0x40	; 64
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	d9 07       	cpc	r29, r25
 140:	21 f7       	brne	.-56     	; 0x10a <main+0x8>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x40>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
